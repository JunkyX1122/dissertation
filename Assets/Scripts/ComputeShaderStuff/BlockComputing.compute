// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture


int3 back_centre = {0, 0, -1};
int3 back_up = {0, 1, -1};
int3 back_down = {0, -1, -1};
int3 back_left = {-1, 0, -1};
int3 back_right = {1, 0, -1};
int3 back_up_left = {-1, 1, -1};
int3 back_up_right = {1, 1, -1};
int3 back_down_left = {-1, -1, -1};
int3 back_down_right = {1, -1, -1};

int3 middle_centre = {0, 0, 0}; // THE CELL
int3 middle_up = {0, 1, 0};
int3 middle_down = {0, -1, 0};
int3 middle_left = {-1, 0, 0};
int3 middle_right = {1, 0, 0};
int3 middle_up_left = {-1, 1, 0};
int3 middle_up_right = {1, 1, 0};
int3 middle_down_left = {-1, -1, 0};
int3 middle_down_right = {1, -1, 0};
    
int3 front_centre = {0, 0, 1};
int3 front_up = {0, 1, 1};
int3 front_down = {0, -1, 1};
int3 front_left = {-1, 0, 1};
int3 front_right = {1, 0, 1};
int3 front_up_left = {-1, 1, 1};
int3 front_up_right = {1, 1, 1};
int3 front_down_left = {-1, -1, 1};
int3 front_down_right = {1, -1, 1};

//RWTexture3D<float4> result;
//RWTexture3D<float4> input;
RWTexture3D<float4> test;


[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    /*
    int cellBelowFree = 0;
    if(input[int3(id.x, id.y, id.z) + middle_down].r < 0.8)
    {
        result[int3(id.x, id.y, id.z) + middle_down] = float4(1, 1, 1, 1);
        result[int3(id.x, id.y, id.z)] = float4(0, 0, 0, 0);
    }
    result[id.xyz] = float4(float(id.x/100.0), float(id.y/100.0), float(id.z/100.0), 1);
    */
    test[id.xyz] = float4(float(id.x/100.0), 0, 0, 1);
}

int CalculateArrayIndex(int x, int y, int z)
{
    return x + y * 16 + z * 16 * 16;
}

